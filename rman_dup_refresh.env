
# set a umask so that any files or directories created are only accessiable by the oracle OS user
umask 0066

# SOURCE_SID is usually but not always a production database and can be a physical standby (mounted) database
SOURCE_SID=${SYSTEM}${SOURCE_ENV}
DEST_SID=${SYSTEM}${DEST_ENV}

EMAIL_ADDRESS_LIST="josh.denize@gmail.com"

OSVER=`uname`

if [ "$OSVER" == 'SunOS' ]; then
  ORATAB=/var/opt/oracle/oratab
  OEMTAB=/var/opt/oracle/oragchomelist
elif [ "$OSVER" == 'Linux' ]; then
  ORATAB=/etc/oratab
  OEMTAB=/etc/oragchomelist
else
  echo "ERROR: unsupported OS type"
  exit 1
fi

if [ ! -r $ORATAB ]; then
  echo "ERROR: cannot read ORATAB file $ORATAB"
  exit 1
fi

export ORACLE_SID=`grep -v ^# $ORATAB | cut -d: -f1 | grep -i ^${DEST_SID}$`
#echo ORACLE_SID=$ORACLE_SID
if [ -z $ORACLE_SID ]; then
  echo "ERROR: cannot find $DEST_SID in ORATAB file $ORATAB"
  exit 1
else
  DEST_SID=$ORACLE_SID
fi

if [ `grep -v ^# $ORATAB | grep ^${ORACLE_SID}: | cut -d: -f2 | grep -c /12\.` -gt 0 ]; then
  ORAVER=12c
elif [ `grep -v ^# $ORATAB | grep ^${ORACLE_SID}: | cut -d: -f2 | grep -c /11\.` -gt 0 ]; then
  ORAVER=11g
elif [ `grep -v ^# $ORATAB | grep ^${ORACLE_SID}: | cut -d: -f2 | grep -c /10\.` -gt 0 ]; then
  ORAVER=10g
else
  echo "ERROR: cannot determine the major Oracle version for $DEST_SID from ORATAB file $ORATAB"
  exit 1
fi

if [ ! -r $OEMTAB ]; then
  echo "WARNING: cannot read OEMTAB file $ORATAB"
else
  export OEMAGENT_HOME=`grep -v ^# $OEMTAB|grep -v ^$|grep agent13|head -1|cut -d: -f1`
  export PATH=$PATH:$OEMAGENT_HOME/bin
  OEMTARGET_DATABASE=`emctl config agent listtargets|grep oracle_database|grep -i $DEST_SID|cut -d, -f1|cut -c2-|head -1`
  OEMTARGET_LISTENER=`emctl config agent listtargets|grep oracle_listener|grep -i $DEST_SID|cut -d, -f1|cut -c2-|head -1`
fi

DATETIME=`date +'%Y%m%d_%H%M'`
export NLS_DATE_FORMAT='yyyy-mm-dd hh24:mi:ss'

export ORAENV_ASK=NO
export PATH=$PATH:/usr/local/bin

#export TNS_ADMIN=$ORACLE_HOME/network/admin
export TNS_ADMIN=$SYS_DIR/tns_admin

export RESULT=PASS

TEMP_LOG_FILE=/tmp/${SCRIPT_NAME}_${SOURCE_SID}_${DEST_SID}_${DATETIME}.tmp
MAIN_LOG_FILE=$LOGS_DIR/${SCRIPT_NAME}_${SOURCE_SID}_${DEST_SID}_${DATETIME}.log
RMAN_LOG_FILE=$LOGS_DIR/${SCRIPT_NAME}_${SOURCE_SID}_${DEST_SID}_${DATETIME}_rman.log
RESULTS_LOG_FILE=$LOGS_DIR/${SCRIPT_NAME}_${SOURCE_SID}_${DEST_SID}_${DATETIME}_results.log

# The POST_DB_REFRESH_SCRIPT_DEF_FILE is specific to the DEST_SID database
# The POST_DB_REFRESH_SCRIPT_SQL_FILE is generic to the SYSTEM
export POST_DB_REFRESH_SCRIPT_DIR=$SYS_DIR/post_DB_refresh
POST_DB_REFRESH_SCRIPT_DEF_FILE=$SYS_DIR/post_DB_refresh_${DEST_SID}.sql
POST_DB_REFRESH_SCRIPT_SQL_FILE=$SYS_DIR/post_DB_refresh_${SYSTEM}.sql
POST_DB_REFRESH_SCRIPT_LOG_FILE=$LOGS_DIR/${SCRIPT_NAME}_${SOURCE_SID}_${DEST_SID}_${DATETIME}_post_DB_refresh.log

SOURCE_DB_SYSDBA_PWD_FILE=$SYS_DIR/.orapwd_sysdba_${SOURCE_SID}
SOURCE_DB_SYSBACKUP_PWD_FILE=$SYS_DIR/.orapwd_sysbackup_${SOURCE_SID}

if [ -r $SOURCE_DB_SYSDBA_PWD_FILE ]; then
  SOURCE_DB_SYSDBA_PWD=`grep -v ^# $SOURCE_DB_SYSDBA_PWD_FILE|head -1`
fi

if [ -r $SOURCE_DB_SYSBACKUP_PWD_FILE ]; then
  SOURCE_DB_SYSBACKUP_PWD=`grep -v ^# $SOURCE_DB_SYSBACKUP_PWD_FILE|head -1`
fi

DEST_ADR_SHORTP_POLICY=72 # ADR short purge policy in hours = 3 days
DEST_ADR_LONGP_POLICY=336 # ADR long purge policy in hours = 2 weeks

RMAN_PARALLELISM=8

if [ ! $ORAVER == "12c" ]; then
  RMAN_CONNECT_TARGET_STR="sys/${SOURCE_DB_SYSDBA_PWD}@${SOURCE_SID}"
  RMAN_CONNECT_AUX_STR="sys/${SOURCE_DB_SYSDBA_PWD}@${DEST_SID}"
else
  RMAN_CONNECT_TARGET_STR="\"sysbackup/${SOURCE_DB_SYSBACKUP_PWD}@${SOURCE_SID} as sysbackup\""
  RMAN_CONNECT_AUX_STR="\"sysbackup/${SOURCE_DB_SYSBACKUP_PWD}@${DEST_SID} as sysbackup\""
fi


